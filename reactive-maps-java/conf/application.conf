# This is the main configuration file for the application.
# ~~~~~

# 14 means 2 ^^ 14 regions, ie 16 million
reactiveMaps.maxZoomDepth=14

reactiveMaps.maxSubscriptionRegions=6

reactiveMaps.clusterThreshold=16
reactiveMaps.clusterDimension=4

reactiveMaps.summaryInterval=5s
reactiveMaps.expiryInterval=30s
reactiveMaps.subscriberBatchInterval=2s

reactiveMaps.bots.enabled=true
reactiveMaps.bots.totalNumberOfBots=75

# Default database configuration using H2 database engine in an in-memory mode
#db.default.driver=org.h2.Driver
#db.default.url="jdbc:h2:mem:play"
#ebean.default="models.*"

# Default database configuration using MySQL database engine
# Connect to playdb as playdbuser
db.default.driver=com.mysql.jdbc.Driver
db.default.host="www.motleydev2.com"
db.default.user=playdbuser
db.default.password="playdbuserpw"
db.default.url="jdbc:mysql://www.motleydev2.com:3306/timelines?useSSL=false"

applyEvolutions.default=true

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="a[/]lvmup73gxQv4tPfhopy7LuFM2OFm2CT4/MfhDuvlK?W5/lQB_?`MGVx=Jn21"

# The application languages
# ~~~~~
application.langs="en"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=INFO

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# Akka configuration
akka {

  loglevel = INFO

  actor.provider = "akka.cluster.ClusterActorRefProvider"

  extensions = [
    "akka.contrib.pattern.DistributedPubSubExtension"
  ]

  remote.netty.tcp {
    hostname = "127.0.0.1"
    port = 2552
  }

  cluster {
    seed-nodes = ["akka.tcp://application@127.0.0.1:2552"]
    roles = ["frontend", "backend-region", "backend-summary"]
    auto-down = on
  }

  actor.deployment {
    # Routing of position updates to the regionManager on the right
    # backend node. The node is selected by consistent hashing of
    # the region id, i.e. user position updates in a region is routed
    # to the backend node responsible for that region.
    /regionManagerClient/router {
      router = consistent-hashing
      nr-of-instances = 1000
      cluster {
        enabled = on
        routees-path = "/user/regionManager"
        allow-local-routees = on
        use-role = "backend-region"
      }
    }
    # Routing of sub-region summary information to enclosing region,
    # which may be located on another backend node. The node is selected
    # by consistent hashing of the region id.
    /regionManager/router {
      router = consistent-hashing
      nr-of-instances = 1000
      cluster {
        enabled = on
        routees-path = "/user/regionManager"
        allow-local-routees = on
        use-role = "backend-summary"
      }
    }
  }
}

atmos {
  trace {
    enabled = true
    node = ReactiveMaps
    traceable {
      "*" = on
    }
    sampling {
      "*" = 100
    }
  }
}
